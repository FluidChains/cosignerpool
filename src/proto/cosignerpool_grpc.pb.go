// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CosignerpoolClient is the client API for Cosignerpool service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CosignerpoolClient interface {
	// Writes a value into a key
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
	// Reads the value of a key
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// Deletes a key
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	// Sends a 'ping'
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Pong, error)
	// Gets the time on the server
	GetTime(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetTimeResponse, error)
}

type cosignerpoolClient struct {
	cc grpc.ClientConnInterface
}

func NewCosignerpoolClient(cc grpc.ClientConnInterface) CosignerpoolClient {
	return &cosignerpoolClient{cc}
}

func (c *cosignerpoolClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := c.cc.Invoke(ctx, "/cosignerpool.Cosignerpool/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cosignerpoolClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/cosignerpool.Cosignerpool/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cosignerpoolClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/cosignerpool.Cosignerpool/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cosignerpoolClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := c.cc.Invoke(ctx, "/cosignerpool.Cosignerpool/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cosignerpoolClient) GetTime(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetTimeResponse, error) {
	out := new(GetTimeResponse)
	err := c.cc.Invoke(ctx, "/cosignerpool.Cosignerpool/GetTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CosignerpoolServer is the server API for Cosignerpool service.
// All implementations must embed UnimplementedCosignerpoolServer
// for forward compatibility
type CosignerpoolServer interface {
	// Writes a value into a key
	Put(context.Context, *PutRequest) (*PutResponse, error)
	// Reads the value of a key
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// Deletes a key
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	// Sends a 'ping'
	Ping(context.Context, *Empty) (*Pong, error)
	// Gets the time on the server
	GetTime(context.Context, *Empty) (*GetTimeResponse, error)
	mustEmbedUnimplementedCosignerpoolServer()
}

// UnimplementedCosignerpoolServer must be embedded to have forward compatible implementations.
type UnimplementedCosignerpoolServer struct {
}

func (*UnimplementedCosignerpoolServer) Put(context.Context, *PutRequest) (*PutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (*UnimplementedCosignerpoolServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedCosignerpoolServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedCosignerpoolServer) Ping(context.Context, *Empty) (*Pong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedCosignerpoolServer) GetTime(context.Context, *Empty) (*GetTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTime not implemented")
}
func (*UnimplementedCosignerpoolServer) mustEmbedUnimplementedCosignerpoolServer() {}

func RegisterCosignerpoolServer(s *grpc.Server, srv CosignerpoolServer) {
	s.RegisterService(&_Cosignerpool_serviceDesc, srv)
}

func _Cosignerpool_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CosignerpoolServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosignerpool.Cosignerpool/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CosignerpoolServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cosignerpool_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CosignerpoolServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosignerpool.Cosignerpool/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CosignerpoolServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cosignerpool_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CosignerpoolServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosignerpool.Cosignerpool/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CosignerpoolServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cosignerpool_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CosignerpoolServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosignerpool.Cosignerpool/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CosignerpoolServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cosignerpool_GetTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CosignerpoolServer).GetTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosignerpool.Cosignerpool/GetTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CosignerpoolServer).GetTime(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cosignerpool_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cosignerpool.Cosignerpool",
	HandlerType: (*CosignerpoolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _Cosignerpool_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Cosignerpool_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Cosignerpool_Delete_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Cosignerpool_Ping_Handler,
		},
		{
			MethodName: "GetTime",
			Handler:    _Cosignerpool_GetTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cosignerpool.proto",
}
